0x9800,	pre_comment 	; This is a header for this ROM.
	 	; It looks like these ROMs are pluggable. There's nothing that refers to this table
	 	; in this ROM, so i have a suggestion that there's a "master" rom which scans all the
	 	; slots where an "auxiliary test" rom is present; and composes list of tests (applications,
	 	; if you want) in runtime.
	 	; This leads to a suggestions that a new tests (or, let's call them applets) can be added
	 	; to the Diag card by simply adding a ROM with a table like this in the beginning.
	 	; The "master ROM" is expected to see them and add to the list.
0x9800 ,	comment	; Entry_01133_CMD_AUX_MEMORY_TEST - 0x9800
0x981e ,	comment	; Entry_01133_CMD_SEEK_TEST - 0x9800
0x9836 ,	comment	; Entry_01133_CMD_READ_TEST - 0x9800
0x984e ,	comment	; Entry_FINCH_AUX_MEMORY_TEST - 0x9800
0x9868,	comment 	; Entry_FINCH_SEEK_TEST - 0x9800
0x987c,	comment 	; Entry_FINCH_READ_TEST - 0x9800
0x9890 ,	comment	; Entry_ROM_SELF_TEST - 0x9800
0x98a3,	comment 	; Terminator
0x98c5,	pre_comment 	; Writes out a 16-bit value from A as hexadecimal
0x98d0,	pre_comment 	; Writes contents of AL to terminal as a hexadecimal number
0x9901,	pre_comment 	; This subroutine checks whether a Ctrl-C is pressed, and, if not,
	 	; restarts the code from an offset, defined by two bytes, following the call
0x9904 ,	comment	; Check if we have a character from the MUX0
0x990a ,	comment	; Read byte from the terminal
0x990d ,	comment	; The byte is expected to be 0x03 or 0x83
0x9916 ,	comment	; Exit status
0x992d ,	comment	; Decimal 2 clear
0x9930 ,	comment	; Decimal 3 set
0x9947 ,	comment	; ReadChar
0x994a ,	comment	; Go to return address
0x994d,	pre_comment 	; Exit status is 0
0x9961,	pre_comment 	; No Ctrl-C pressed, resume
0x9964 ,	comment	; Reset the stack, place it above the Diag board window
0x9965 ,	comment	; ROMBase
0x996d ,	comment	; Jump to restart point
0x998b,	pre_comment 	; Every test begins with a call to this routine. All reusable functions are called
	 	; indirectly via address table, built in RAM by this function. Also interesting
	 	; to note that this address table and its slots are the same between all auxiliary
	 	; test ROMs. We can think of it as of a mini-BIOS, or "kernal". Since the structure
	 	; of this table appears the same in all auxiliary ROMs, this suggests that this "BIOS"
	 	; portion is copypasted from somewhere else. So, we may have more software components,
	 	; like bootloaders, WIPL, etc, sharing the same (or similar) function table.
	 	; 
	 	; Entry parameters:
	 	; EX = 0x9800 - base address of this ROM
	 	; RT = a pointer to a table of two 16-bit words:
	 	; table + 0 - address of a HW controller
	 	; table + 2 - address of a test code to execute
0x998c ,	comment	; Initialize exit status to 0
0x9992 ,	comment	; WaitForReady
0x999a ,	comment	; WriteHex
0x99a2 ,	comment	; WaitNotFIn
0x99aa ,	comment	; PrintCtrlCToExit
0x99b2 ,	comment	; ReadChar
0x99ba ,	comment	; WriteString
0x99c2 ,	comment	; WriteHex16
0x99ca ,	comment	; FinishTest
0x99d2 ,	comment	; PressSpaceThenExit
0x99d9 ,	comment	; ROMBase
0x99dc ,	comment	; AX = controller base address ?
0x99e7 ,	comment	; RT = return address (pop)
0x99ec ,	comment	; Jump back to our caller
0x99ee,	pre_comment 	; This routine waits for the completion of the command by the controller
	 	; and reads the result code.
	 	; Any error here is considered critical, test execution aborts immediately
	 	; Wait for the last command byte to be consumed
0x99ee ,	comment	; WaitNotFIn
		; Now wait for BUSY to clear
0x99f3 ,	comment	; Timeout for BUSY
0x99f6 ,	comment	; STATUS_REG
0x99fb ,	comment	; BUSY = STATUS_REG & 0x08
0x9a20 ,	comment	; Decimal 2 clear
0x9a23 ,	comment	; Decimal 3 set
0x9a26 ,	comment	; PressSpaceThenExit
0x9a29,	pre_comment 	; BUSY == 0
0x9a2c,	pre_comment 	; Now check that FOUT is set
	 	; Presumably it signals availability of the result code
0x9a2c ,	comment	; FOUT = STATUS_REG & 0x01
0x9a31 ,	comment	; This looks like a bug. We're re-testing AL by shifting
		; it right, but we don't actually re-read it from the controller.
0x9a57 ,	comment	; PressSpaceThenExit
0x9a5b ,	comment	; COMMAND_REG - result code
0x9a63,	pre_comment 	; This will report an error code from the FFC, but continue test execution
	 	; It looks like "operation completed, but with an error"
0x9a6f ,	comment	; WriteHex
0x9a84 ,	comment	; exit status = 1
0x9a97 ,	comment	; STATUS_REG
0x9a9b ,	comment	; FIN = STATUS_REG & 0x02
0x9ac8 ,	comment	; PressSpaceThenExit
0x9ad3 ,	comment	; Init
0x9ad5 ,	comment	; CMD registers base
		; AUX_Mem_Test
0x9ad9,	pre_comment 	; This test checks 3840 bytes of FFC's on-board memory.
	 	; I suggest that for some reason this is not all of the memory, because as
	 	; we can see from read tests below, disks are read on a per-track basis,
	 	; and each track is 6400 bytes long (16 sectors, 400 bytes per sector)
	 	; Yes, the same code is used for CMD board, the only difference is controller
	 	; base address: 0xf808 for CMD vs 0xf800 for FFC.
0x9ade ,	comment	; Init
0x9ae0 ,	comment	; Finch registers address
0x9ae5,	pre_comment 	; PrintCtrlCToExit
	 	; The test restarts from here
0x9ae7 ,	comment	; Test pattern length is 3840 bytes
0x9aec ,	comment	; Start of our test patterm
0x9aef ,	comment	; Fill in the test pattern
0x9af7 ,	comment	; -3841, does the DMA count up to 0 ?
0x9b05,	pre_comment 	; These are the only two commands, whose parameters are sent using the
	 	; memory-mapped command register. All other operations (seek, read, etc)
	 	; only use a single byte as command; request parameters are sent as a
	 	; data packet over DMA.
	 	; After writing each byte we need to wait for FIN status bit to go down.
	 	; The bit indicates that the controller hasn't consumed the byte yet
0x9b05 ,	comment	; Write AUX ?
0x9b07 ,	comment	; COMMAND_REG
0x9b0a ,	comment	; WaitNotFIn
0x9b0f ,	comment	; COMMAND_REG
0x9b12 ,	comment	; WaitNotFIn
0x9b16 ,	comment	; COMMAND_REG
0x9b19 ,	comment	; WaitNotFIn
0x9b1e ,	comment	; COMMAND_REG
0x9b21 ,	comment	; WaitNotFIn
0x9b25 ,	comment	; COMMAND_REG
0x9b28 ,	comment	; WaitForReady
0x9b2b ,	comment	; Clear 3840 bytes...
0x9b2f ,	comment	; Starting at 0x011c
0x9b45 ,	comment	; Read AUX ?
0x9b47 ,	comment	; COMMAND_REG
0x9b4a ,	comment	; WaitNotFIn
0x9b4d ,	comment	; 0x0100 - could be memory start address (from FFC pov) ?
0x9b4f ,	comment	; COMMAND_REG
0x9b52 ,	comment	; WaitNotFIn
0x9b56 ,	comment	; COMMAND_REG
0x9b59 ,	comment	; WaitNotFIn
0x9b5c ,	comment	; 0x0f00 - data size
0x9b5e ,	comment	; COMMAND_REG
0x9b61 ,	comment	; WaitNotFIn
0x9b65 ,	comment	; COMMAND_REG
0x9b68 ,	comment	; WaitForReady
0x9b6d ,	comment	; Compare 3840 bytes
0x9b70 ,	comment	; Starting from 0x011c
0x9b73 ,	comment	; AX = 0
0x9b8b ,	comment	; FinishTest
0x9b8e ,	comment	; Restart point = 0x9ae5
0x9baf ,	comment	; WriteHex16
0x9bbd ,	comment	; WriteHex
0x9bcb ,	comment	; WriteHex
0x9bd6 ,	comment	; PressSpaceThenExit
0x9bd9,	pre_comment 	; This test seeks back and forth to each track of the Phoenix drive
	 	; It runs continuously until interrupted by Ctrl-C.
	 	; An error in communication between the controller board and CPU is considered
	 	; fatal. A remote error code, returned by the board as a result of operation,
	 	; is logged in hexadecimal, but the test continues. After Ctrl-C the test reports
	 	; "PASS" if no errors have been found or "FAILED" if there has been at least one
	 	; error code reported by the FFC controller.
	 	; The drive has total of 822 tracks.
0x9bde ,	comment	; Init
0x9be0 ,	comment	; CMD_REGS_BASE
0x9be5,	pre_comment 	; This is restart point
	 	; All the code below differs from the aux memory test. The command
	 	; is sent to the card via DMA; controller's command register does not
	 	; provide any parameters.
0x9be8 ,	comment	; packet[0,1] = 0x8100 - perhaps unit #0, see Finch code
0x9bed ,	comment	; packet[2,3] = 0x82FF
0x9bf1 ,	comment	; -5 = 4 bytes
0x9bf6 ,	comment	; control packet base
0x9c01 ,	comment	; COMMAND_REG
0x9c04 ,	comment	; WaitForReady
0x9c09,	pre_comment 	; Error - drive is not ready
0x9c0f ,	comment	; PressSpaceThenExit
0x9c14 ,	comment	; COMMAND_REG
0x9c17 ,	comment	; WaitForReady
0x9c1c,	pre_comment 	; packet[0,1] stays = 0x8100
0x9c1c ,	comment	; &packet[2]
0x9c22 ,	comment	; packet[2,3] = 0x8400
0x9c26 ,	comment	; packet[4] = 0x83
0x9c28 ,	comment	; 0x0000
0x9c29 ,	comment	; packet[5,6] = 0 - initial track number
0x9c2c ,	comment	; packet[7] = 0xFF
0x9c2e ,	comment	; 0x01
0x9c2f ,	comment	; Tracks per step
0x9c32,	pre_comment 	; This is the main loop
0x9c32 ,	comment	; control packet base
0x9c37 ,	comment	; -9 = 8 bytes
0x9c40,	pre_comment 	; Seek operation consists of two commands
0x9c42 ,	comment	; COMMAND_REG
0x9c45 ,	comment	; WaitForReady
0x9c4c ,	comment	; COMMAND_REG
0x9c4f ,	comment	; WaitForReady
0x9c5e ,	comment	; packet[5] = Track number
0x9c61 ,	comment	; WriteHex16
0x9c70 ,	comment	; tracks_per_step
0x9c75 ,	comment	; Track += tracks_per_step
0x9c7d ,	comment	; 822 tracks total
0x9c85 ,	comment	; tracks_per_step = -1
0x9c8f ,	comment	; Track -= 1
0x9c98 ,	comment	; FinishTest
0x9c9b ,	comment	; Restart point is 9be5
0x9ca2 ,	comment	; Init
0x9ca4 ,	comment	; CMD_REGS_BASE
0x9cc2 ,	comment	; 16 sectors
0x9cc7 ,	comment	; Sector length 400 bytes
0x9ce5 ,	comment	; COMMAND_REG
0x9ce8 ,	comment	; WaitForReady
0x9cf3 ,	comment	; PressSpaceThenExit
0x9d06 ,	comment	; COMMAND_REG
0x9d09 ,	comment	; WaitForReady
0x9d1b ,	comment	; WriteHex16
0x9d37 ,	comment	; FinishTest
0x9d3c,	pre_comment 	; The same as CMD seek test, but uses Finch hard drive unit #2
	 	; Seeks back and forth to each track until interrupted. The drive
	 	; has 604 tracks.
0x9d41 ,	comment	; Init
0x9d43 ,	comment	; FFC_REGS_BASE
0x9d48 ,	comment	; Data packet address
0x9d4e ,	comment	; packet[0, 1] = 0x8102 - this selects unit 2
0x9d53 ,	comment	; packet[2, 3] = 0x8400
0x9d58 ,	comment	; packet[4, 5] = 0x82ff
0x9d59 ,	comment	; -7 = 6 bytes
0x9d69 ,	comment	; COMMAND_REG
0x9d6c ,	comment	; WaitForReady
0x9d71,	pre_comment 	; Not ready
0x9d77 ,	comment	; PressSpaceThenExit
0x9d7c ,	comment	; COMMAND_REG
0x9d7f ,	comment	; WaitForReady
0x9d84,	pre_comment 	; Prepare seek request
0x9d84 ,	comment	; &packet[2]
0x9d8a ,	comment	; packet[2,3] = 0x8400
0x9d8e ,	comment	; packet[4] = 0x83
0x9d91 ,	comment	; packet[5,6] = 0 - track number
0x9d94 ,	comment	; packet[7,8] = -1
0x9d97 ,	comment	; tracks_per_step = 1
0x9d9a,	pre_comment 	; This is the test's main loop
0x9d9f ,	comment	; 9 bytes
0x9daa ,	comment	; COMMAND_REG
0x9dad ,	comment	; WaitForReady
0x9db4 ,	comment	; COMMAND_REG
0x9db7 ,	comment	; WaitForReady
0x9dc6 ,	comment	; packet[5, 6] = track number
0x9dc9 ,	comment	; WriteHex16
0x9dd8 ,	comment	; track_per_step
0x9ddd ,	comment	; track++
0x9de4 ,	comment	; 604 tracks total
0x9dec ,	comment	; tracks_per_step = -1
0x9df1,	pre_comment 	; track_per_step < 0
0x9dfa ,	comment	; FinishTest
0x9dff,	pre_comment 	; This test reads certain tracks fron the Finch hard drive.
	 	; Each track (16 sectors, 400 bytes each) is read into a 6400 bytes
	 	; buffer in main RAM. No checks are done on the contents; apparently
	 	; data integrity is entirely verified by the controller card.
	 	; The test does not read all tracks, but only those with a number being
	 	; power of 2. The sequence starts at zero:
	 	; 0 1 2 4 8 16 ...
	 	; The test completes by itself after reaching track number 604.
0x9e04 ,	comment	; Init
0x9e06 ,	comment	; FFC_REGS_BASE
0x9e0b ,	comment	; Prepare the request packet
0x9e12 ,	comment	; packet[0, 1] = 0x8102
0x9e17 ,	comment	; packet[2, 3] = 0x8400
0x9e1b ,	comment	; packet[4] = 0x83
0x9e1e ,	comment	; packet[5,6] = 0 - track number
0x9e22 ,	comment	; packet[7] = 0x8a
0x9e27,	pre_comment 	; The following contents of the request packet looks like sector gather list:
	 	; 0, 400
	 	; 1, 400
	 	; 2, 400
	 	; ...
	 	; 15, 400
	 	; (48 bytes total)
0x9e27 ,	comment	; Is it sector numbers ?
0x9e2c ,	comment	; packet[9,10] = 400
0x9e34 ,	comment	; This sequence terminates with 0xff.
0x9e36 ,	comment	; It it some list ? Sectors ?
0x9e37,	pre_comment 	; Test's main loop
	 	; A data read operation is executed in two steps.
	 	; First a 0x43 is written into the command register
	 	; and a request packet is fed into the DMA.
	 	; Second a 0x45 is written; and the data is retrieved.
	 	; Interesting to note that Seek test also uses a sequence
	 	; of the same 0x43, 0x45 commands; but no actual data is
	 	; returned. It looks like Seek returns an "empty payload"
0x9e37 ,	comment	; Request length = 60 bytes
0x9e3c ,	comment	; Send the request
0x9e45 ,	comment	; Execute
0x9e47 ,	comment	; COMMAND_REG
0x9e4a ,	comment	; WaitForReady
0x9e55 ,	comment	; PressSpaceThenExit
0x9e58 ,	comment	; 6400 bytes = 16 sectors * 400 bytes
0x9e5d ,	comment	; Address to place data
0x9e66 ,	comment	; Return data
0x9e68 ,	comment	; COMMAND_REG
0x9e6b ,	comment	; WaitForReady
0x9e7a ,	comment	; Track number
0x9e7d ,	comment	; WriteHex16
0x9e86 ,	comment	; Update track number
0x9e8b ,	comment	; From track 0 we go to track 1
0x9e8c ,	comment	; And then track number becomes next power of 2
0x9e90 ,	comment	; 604 tracks total
0x9e99 ,	comment	; FinishTest
0x9ea3 ,	comment	; Init
0x9ea5 ,	comment	; No hardware base address
0x9eaa,	pre_comment 	; Simply calculate 8-bit sum of all bytes in this ROM...
0x9eb7 ,	comment	; And compare it with the last byte.
0x9ed1 ,	comment	; PressSpaceThenExit
0x9eea ,	comment	; PressSpaceThenExit
0x9eed ,	comment	; Checksum byte
