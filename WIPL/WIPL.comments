0x108,	pre_comment 	; Entry point
0x109 ,	comment	; S[IPL6] = 0
0x10c ,	comment	; S[IPL15] = 0
0x10f ,	comment	; P[IPL10] = 0
0x115 ,	comment	; P[IPL15] = AbortHandler
0x118 ,	comment	; 0xc5
0x11a ,	comment	; Patch ld AL, #0xc5 instruction at addr 043c
0x11d ,	comment	; Patch ld BL, #0xc5 instruction at addr 056d
0x120 ,	comment	; Initialize stack
0x124 ,	comment	; This sends RTZ command to our disks.
0x138,	pre_comment 	; We go here if sense1 switch is set (DIAG board is present)
0x138 ,	comment	; X = S[IPL1] - 20
0x13b ,	comment	; Looks like DIAG overrides our mem test and tells us
0x13f ,	comment	; size of RAM to use
0x141,	pre_comment 	; Self-modifying code ahead!!!
	 	; The function at L_014b probes for 8 units on a DSK board at base address (AL << 16) + 0x40
	 	; and, if successful, sends an RTZ command.
	 	; These four stores patch the base address in the code below
0x141 ,	comment	; 14c
0x143 ,	comment	; 152
0x145 ,	comment	; 015d
0x147 ,	comment	; 0163
0x149 ,	comment	; Start probing from unit 7
0x14b,	pre_comment 	; Probe drive units from 7 to 0 and send RTZ command to connected ones
0x14b ,	comment	; Unit select
0x14e ,	comment	; BL = 0 (RTZ), BH = value to check flags against
0x151 ,	comment	; Read command register ??? Some flaga ???
0x154 ,	comment	; command_reg & 0x30
0x158 ,	comment	; Should be 0x30. If not, skip this unit (not present)
0x15c ,	comment	; RTZ (recalibrate)
0x162 ,	comment	; Wait for command_reg & 0x30 == 0x30; this indicates drive ready
0x16b ,	comment	; Next unit, down to 0
0x16f,	pre_comment 	; Continuation of boot process
0x173 ,	comment	; Y = 4096
0x174,	pre_comment 	; This locates end of RAM, effectively probing how much RAM we've got
0x174 ,	comment	; Preserve original (X) value
0x175 ,	comment	; Try to store 0xff
0x178 ,	comment	; Load it back
0x179 ,	comment	; Exit if we got zero (failed to store)
0x17b ,	comment	; Put original value back
0x17c ,	comment	; X += 4096 (page size ?)
0x17e ,	comment	; Reached 0xf000 ?
0x183 ,	comment	; Repeat until we reach 0xf000
0x185 ,	comment	; Store final address of our RAM
0x18a ,	comment	; B = ram_top - 683
0x18e ,	comment	; Set up buffers for sector I/O
0x191 ,	comment	; B = buffer0 - 400
0x198 ,	comment	; Set stack at buffer1 - 400
0x1a1 ,	comment	; B = top of RAM - 283
0x1a3 ,	comment	; This will be address of our trampoline code
0x1a6 ,	comment	; '='
0x1a8 ,	comment	; This sets up prompt character, i wonder why...
0x1ae ,	comment	; abort_addr = to BackToPrompt
0x1b1 ,	comment	; '1'
0x1b3 ,	comment	; This sets default boot disk to "01" or "00"
0x1b5 ,	comment	; depending on Sense4 value
0x1b6 ,	comment	; Store to disk_buffer[4]
0x1b9 ,	comment	; Bypass the prompt and try to boot with preset default values
0x1bb,	pre_comment 	; The code jumps here when for instance empty string was entered on CODE prompt
	 	; According to known behavior, thus jumps back to WIPL prompt, effectively
	 	; restarting it
0x1bc,	pre_comment 	; This forces the user to enter the disk code and boot file name
0x1bc ,	comment	; This sets CheckCodeFlag to 0xFF (true)
0x1c2 ,	comment	; Pre-fill buffer for NAME= with spaces
0x1ce ,	comment	; WIPL version string
0x1d7 ,	comment	; "NAME"
0x1dc ,	comment	; name_buffer
0x1e1 ,	comment	; "DISK"
0x1e6 ,	comment	; disk_buffer
0x1eb ,	comment	; "CODE"
0x1ed ,	comment	; Suppress terminal input echo for CODE entering
0x1ef ,	comment	; disable_echo
0x1f5 ,	comment	; code_buffer
0x200 ,	comment	; name_buffer
0x202 ,	comment	; disk_buffer
0x206 ,	comment	; String length
0x20a ,	comment	; Just one char means board offset 0
0x20c ,	comment	; ' ' (space)
0x20e ,	comment	; Check character[1]
0x214 ,	comment	; BL = *char++
0x21b ,	comment	; magic_value = 'p' - char
0x21c ,	comment	; magic_value
0x223 ,	comment	; DSK0_BASE | (magic_value << 2)
0x225 ,	comment	; Set DSK board address
0x22c ,	comment	; dma_mode_byte = magic_value << 4
0x22d ,	comment	; Patch dma_set_mode insn
0x231 ,	comment	; '0'
0x238 ,	comment	; Valid units 0 - 7
0x23f ,	comment	; This writes Hawk unit select register
0x242 ,	comment	; code_buffer
0x246 ,	comment	; Check string length
0x248 ,	comment	; If zero, use the default code
0x24d,	pre_comment 	; Z points at the first non-numeric character after the code
0x24d ,	comment	; DiskCodeValue = StrToNum(CodeBuffer + 2)
0x250 ,	comment	; Track 0 side 0 sector 15
0x257,	pre_comment 	; Z is an address of the loaded sector
0x257 ,	comment	; Disk format flag
0x25a ,	comment	; Must be equal to 0xff
0x25b ,	comment	; Proceed to disk code checking
0x261 ,	comment	; Incorrect disk format
0x265 ,	comment	; This is a "check disk code" flag. If zero, the check will be bypassed.
		; In pristine bootloader, read from the disk image, there's a 00 at this location.
		; It is set to 0xff (true) when the prompt is issued for the first time.
0x266 ,	comment	; Disk code is derived from this value
0x26a ,	comment	; This whole thing rotates A right WITHOUT carry
0x273 ,	comment	; Some more obfuscation
0x278 ,	comment	; B is the final expected value here
0x27a ,	comment	; This is "request check" flag. We don't know how/where it's set.
0x27d ,	comment	; If not zero, the check is required
0x27f ,	comment	; DiskCodeValue = expected_code
0x282 ,	comment	; Bypass
0x284,	pre_comment 	; Check the disk code. Expected value is in B.
0x284 ,	comment	; A = DiskCodeValue
0x287 ,	comment	; B = expected_disk_code
0x288 ,	comment	; Proceed if there's a match
0x28e ,	comment	; Incorrect disk code
0x293,	pre_comment 	; Disk code is correct. Now we read what we'll call a "boot directory".
	 	; Number of starting block is stored at (sector_base + 4) in a scrambled
	 	; form. The disk code is used to unscramble it.
0x293 ,	comment	; sector_base + 4
0x298 ,	comment	; The same magic constant as used for making the code
0x29d ,	comment	; DiskCodeValue, which we now know is correct
0x2a0 ,	comment	; A = track number here
0x2a4 ,	comment	; sector = track * 16 (sectors per track)
0x2a5 ,	comment	; This should be the first sector of volume's filesystem
0x2a9 ,	comment	; Z is address of the loaded sector
0x2ac ,	comment	; fs_metadata_start_sector - filesystem metadata starts here
0x2af,	pre_comment 	; And here we start searching for a bootable file (let's say so).
	 	; The boot directory (let's say so) is composed of 16-byte entries.
	 	; Each entry contains exactly 10 characters of a file name and 6 bytes of some
	 	; data (would be logical to assume file start and length, at least).
	 	; On the very first entry we start our search at (sector_base + 16), this
	 	; makes sense because the first 16 bytes of sector 14 (where we start from)
	 	; are occupied by special boot information (format flag, key, etc), which
	 	; we've checked above.
	 	; The search goes on to next sector(s), until we hit an entry, starting with
	 	; 0x84 0x8d bytes. In the disk image we have we see these bytes prefixing
	 	; what we think is a data file name.
0x2af ,	comment	; name_on_disk = sector_base + 16, this skips the first entry.
		; That first entry looks like a volume name on the image we have.
0x2b1 ,	comment	; Before proceeding, we copy part of ourselves to the top of RAM.
		; I guess we're preparing to load the boot file into low memory, which would
		; overwrite us.
		; Calls to the relocated fragment are done via CallHighMem routine
0x2b4 ,	comment	; length = 283 bytes
0x2b6 ,	comment	; destination, set to top_of_ram - 283
0x2b8 ,	comment	; source
0x2ba,	pre_comment 	; Here we are trying to find our "name" on the disk
	 	; Names are stored in a series of entries, 16 bytes each.
	 	; struct {
	 	; char name[10];
	 	; uint8_t metadata_entry;
	 	; uint16_t metadata_sector;
	 	; uint8_t file_type;
	 	; }
	 	; name is exactly 10 characters long, padded up with spaces.
	 	; metadata_sector specifies a sector in the filesystem metadata area, from which
	 	; reading starts. metadata_entry is an index of a 3-byte entry within that sector,
	 	; from which the file starts.
	 	; All the metadata sector numbers are relative to fs_metadata_start_sector, fetched
	 	; from the volume header.
	 	; Metadata consists of 3-byte structures:
	 	; struct {
	 	; uint8_t entry_type;
	 	; uint16_t payload;
	 	; }
	 	; The actual meaning of these fields varies depending on the situation,
	 	; see the code below.
0x2ba ,	comment	; Check if we hit the terminator
0x2bf ,	comment	; Go back to the prompt if so
0x2c7 ,	comment	; Y = name_buffer + 2 - start of entered NAME string, skip over length
0x2c8 ,	comment	; AH = 10 - maximum length
0x2cb ,	comment	; c1 = *entered_name++
0x2cd ,	comment	; length--
0x2cf ,	comment	; Proceed if the name matches
0x2d1 ,	comment	; c2 = *name_on_disk
0x2d4 ,	comment	; If matches, go chech the next char
0x2d6 ,	comment	; Mismatch
0x2da ,	comment	; name_on_disk += length (remaining) - this skips past the string
0x2dc ,	comment	; Z = Z + 6 - this skips over to the next entry
0x2e0 ,	comment	; B = LoadBuffer0 - sector address
0x2e3 ,	comment	; This makes sense as add B, B, 400 - point at the end of sector
0x2e9 ,	comment	; Check the next entry if not reached the end
0x2eb ,	comment	; Go to the next sector
0x2ef ,	comment	; Call (end_of_ram - 87) = LoadSector
0x2f2 ,	comment	; Restart the search from the beginning.
		; Z will point at the beginning of the sector this time!!!
0x2f4,	pre_comment 	; NAME found. Z points right after the string in the loaded sector.
	 	; Since length of the name is exactly 10 bytes, we have three words,
	 	; specifying something. The code below reads them.
0x2f5 ,	comment	; A = (unsigned short)dirent.metadata_entry
0x2f9 ,	comment	; B = metadata_entry * 3
0x2fd ,	comment	; B = fs_metadata_start_entry = LoadBuffer1 + metadata_entry * 3
0x2fe ,	comment	; Push fs_metadata_start_entry
0x300 ,	comment	; sector_offset = dirent.metadata_sector
0x302 ,	comment	; X = fs_metadata_start_sector
0x305 ,	comment	; sector_to_read = fs_metadata_start_sector + sector_offset
0x307 ,	comment	; dirent.file_type
0x309 ,	comment	; push file_type
0x30e ,	comment	; Call (end_of_ram - 87) = LoadSector (relocated)
0x310 ,	comment	; Load the metadata sector into buffer #1
0x311,	pre_comment 	; The first two metadata entries constitute a header. We know nothing of
	 	; the first entry, payload of the second entry yields file cluster size
	 	; by doing 1 << payload
0x311 ,	comment	; B = fs_metadata_start_entry
0x315 ,	comment	; A = fs_metadata_start_entry[1].payload
0x318 ,	comment	; X = fs_metadata_start_entry[1].payload
0x319 ,	comment	; A = 1
0x31b ,	comment	; This loop does A = 1 << fs_metadata_start_entry[1].payload
0x321 ,	comment	; file_type
0x322 ,	comment	; [S] is now 1 << fs_metadata_start_entry[1].payload, this will become ClusterSize
0x325 ,	comment	; file_type & 0x0f
0x328 ,	comment	; Should be equal to 4. That's why i think it's a file type
0x329 ,	comment	; If the check fails, we will jump back to the IPL prompt
0x32e ,	comment	; B = ram_top
0x331 ,	comment	; P[IPL15] = (end_of_ram - 1) = AbortHandler (relocated)
0x337 ,	comment	; Call (end_of_ram - 283) = RelocatablePart (relocated)
0x33c ,	comment	; B = ram_top, patched in the beginning
0x363 ,	comment	; Length of entered NAME will be set here
0x374 ,	comment	; disk_buffer
0x378 ,	comment	; code_buffer
0x3bd,	pre_comment 	; This function converts one decimal digit from its ASCII representation
	 	; to value. Result is returned in BL.
0x3bd ,	comment	; '9'
0x3c2 ,	comment	; -1 is returned on invalid character
0x3c5 ,	comment	; '0'
0x3c7 ,	comment	; BL = AL - '0'
0x3c9,	pre_comment 	; Parses a numeric string, pointed to by Z, and returns the
	 	; parsed value in A. Z is updated to point at the first non-digit character
0x3c9 ,	comment	; Check the first character
0x3ce ,	comment	; The character is invalid
0x3d1,	pre_comment 	; A correcr digit has been entered
0x3d2 ,	comment	; value = 0
0x3d4 ,	comment	; Do the conversion again, increment pointer this time
0x3da ,	comment	; Invalid character, restore the pointer
		; It now points behind our number
0x3dc ,	comment	; return value
0x3df ,	comment	; A = value
0x3e0 ,	comment	; (SP) = digit
0x3e2 ,	comment	; B = value << 1
0x3e5 ,	comment	; B = (value << 1) + (value << 3) = value * 10
0x3e6 ,	comment	; A = digit
0x3e8 ,	comment	; B += digit
0x3e9 ,	comment	; value = value * 10 + digit
0x3ec,	pre_comment 	; This code is copied to high RAM (top - 283) and operates from there
	 	; Note that it includes Hawk disk driver. The code is apparently fully relocatable
	 	; This is the actual file loading procedure
0x3ec ,	comment	; Remove saved X from the stack, we aren't going to return
0x3ee ,	comment	; pop ClusterSize
0x3f2 ,	comment	; pop fs_metadata_start_entry
0x3f4 ,	comment	; This skips over header (two 3-byte entries, see above)
0x3f6 ,	comment	; fs_metadata_current_entry = fs_metadata_start_entry + 6
0x3fa ,	comment	; Preset sector_in_cluster to -1, it's preincremented
0x3fc ,	comment	; This should load the first data sector of the file,
		; locate and parse the first section
		; A will hold relative address of the section on return
0x3fe ,	comment	; If A equals to 0x004c, we're doing something interesting
0x402 ,	comment	; This assumes the first section is always data
0x404 ,	comment	; Apparently the data in this section is a header, which holds
		; loading address of the file at offset 27
0x407 ,	comment	; set load_base
0x409 ,	comment	; Skip over this section
0x40b ,	comment	; Skip over checksum byte
0x40d ,	comment	; The next section after the header will be ignored, but we may load next sector(s)
0x40f ,	comment	; Skip over checksum (is body going to have zero length ?)
0x417,	pre_comment 	; Y = start address of the binary being loaded
	 	; Z = pointer to section's data
	 	; X = section length in bytes
0x419 ,	comment	; load_base
0x41b ,	comment	; load_base + offset
0x41f ,	comment	; *(load_base + offset) = *(load_base + offset) + Y
0x420 ,	comment	; length -= 2
0x424 ,	comment	; AL = checksum
0x426 ,	comment	; But it seems to be ignored by the destination of this jump
0x42a,	pre_comment 	; Y = start address of the binary being loaded
	 	; Z = pointer to section's data
	 	; X = section length in bytes
0x42a ,	comment	; If length == 0, loading process has ended
0x430 ,	comment	; A - size - 1
0x431 ,	comment	; This must be memcpy of A+1 bytes from (Z) to (Y)
0x434 ,	comment	; Move our source and destination pointers
0x43a,	pre_comment 	; Jump to the loaded file
0x43a ,	comment	; Set up some arguments
0x43e ,	comment	; Y (section's address) is our entry point
0x440,	pre_comment 	; Parse and interpret a single segment of the binary file
	 	; Z points to a buffer, where segment header is located
	 	; Returns Y = destination address for the segment
	 	; BL = section type
	 	; X = section size
	 	; Z = section data pointer
0x440 ,	comment	; Section type
0x442 ,	comment	; if less than zero, proceed to next sector
		; @LOAD file we know that the actual value is 0x80
0x445 ,	comment	; Section size
0x447 ,	comment	; This will end up in X on return
0x448 ,	comment	; load_base (inline variable)
0x44c ,	comment	; Section address
0x44e ,	comment	; Y = load_base + addr
0x451,	pre_comment 	; At this point fs_metadata_current_entry points at a 3-byte entry, presumably
	 	; inside filesystem's metadata. Let's refresh on entry format:
	 	; struct {
	 	; uint8_t entry_type;
	 	; uint16_t payload;
	 	; }
	 	; if entry_type > 0, payload specifies starting sector of the cluster (absolute).
	 	; if entry_type < 0, ~entry_type is a number of the next metadata sector, relative to
	 	; fs_metadata_start_sector, and payload's LSB specifies an index of the starting
	 	; 3-byte entry in that sector
0x451 ,	comment	; Preserve X
0x453 ,	comment	; A = fs_metadata_current_entry (inline variable)
0x456 ,	comment	; X = fs_metadata_current_entry.payload
0x459 ,	comment	; sector_in_cluster, inline variable
0x45d ,	comment	; sector_in_cluster += 1 - preincrement because we start from -1
0x45f ,	comment	; X = fs_metadata_current_entry.payload + sector_in_cluster
0x464 ,	comment	; If sector_in_cluster <= ClusterSize , load data sector X and start parsing it
0x467 ,	comment	; sector_in_cluster = 0
0x469 ,	comment	; fs_metadata_current_entry += 3 - go to next entry
0x46f ,	comment	; X = fs_metadata_current_entry.payload
0x472 ,	comment	; B = fs_metadata_current_entry
0x473 ,	comment	; A = fs_metadata_current_entry.entry_type
0x474 ,	comment	; if (fs_metadata_current_entry.entry_type > 0) then proceed to loading data sector
0x476,	pre_comment 	; fs_metadata_current_entry.link < 0
	 	; This tells us to load the next medatata sector and start decoding it
	 	; from the offset of (fs_metadata_current_entry.payload & 0x00FF) * 3
	 	; Number of the next sector is: fs_metadata_start_sector + ~fs_metadata_current_entry.entry_type
0x477 ,	comment	; A = new_entry_idx = fs_metadata_current_entry.payload & 0x00FF
0x47a ,	comment	; If A equals to 0x00FF, it's a critical failure, halt the machine.
0x480 ,	comment	; B = new_entry_idx * 3
0x483 ,	comment	; new_fs_metadata_current_entry = LoadBuffer1 + new_entry_idx * 3
0x484 ,	comment	; A = old_link = fs_metadata_current_entry.entry_type
0x486 ,	comment	; fs_metadata_current_entry = new_fs_metadata_current_entry
0x489 ,	comment	; fs_metadata_start_sector, this location is patched
0x48c ,	comment	; X = fs_metadata_start_sector + ~old_link
0x48e ,	comment	; Load filesystem metadata sector X
0x490 ,	comment	; Use LoadBuffer1
0x491 ,	comment	; X = fs_metadata_current_entry
0x493 ,	comment	; X = fs_metadata_current_entry.payload
0x496 ,	comment	; Load sector X into LoadBuffer0, this is file data sector
0x498 ,	comment	; Z = address of the loaded data on return
0x499 ,	comment	; Restore X
0x49b ,	comment	; Sector we've loaded contains load commands
0x4a6 ,	comment	; 400 bytes == 1 sector
0x4b0,	pre_comment 	; This function loads one sector from the drive.
	 	; CHS address of the sector to read needs to be placed into X register
	 	; in HAWK native format (CCCCCCCC CCCHSSSS) before calling this function.
	 	; This routine uses two buffers, whose addresses are stored in two
	 	; variables above. The buffer to use is chosen by the literal byte
	 	; argument: 0 or 1. Address of the buffer is returned in Z.
0x4b3 ,	comment	; Z = DSK_BASE
0x4b4 ,	comment	; A = LoadBuffer0
0x4b8 ,	comment	; If literal argument is not 0...
0x4ba ,	comment	; .. then A = LoadBuffer1
0x4bc ,	comment	; Preserve loading address (patch instruction at 04cd)
0x4be ,	comment	; Setup DMA to read
0x4c4 ,	comment	; READ command
0x4c9,	pre_comment 	; Upon completion status register value will be in A
0x4c9 ,	comment	; Check HAWK_STATUS & 0x0100
0x4cb ,	comment	; If bit set, recalibrate, seek and retry (read error)
0x4cd ,	comment	; A = loading address (this insn is patched)
0x4d4 ,	comment	; RTZ command
0x4dd ,	comment	; A = loading address (from the patched insn)
0x4df ,	comment	; Retry
0x4ea ,	comment	; Write sector address register
0x4ed ,	comment	; SEEK command
0x4f5,	pre_comment 	; This location is only called when READ operation is initiated.
	 	; I suggest it waits for data transfer to end.
0x4f5 ,	comment	; HAWK status
0x4f8 ,	comment	; Wait for STATUS & 0x01 == 0
0x4fb,	pre_comment 	; And this waits for a generic operation completion
0x4fb ,	comment	; HAWK status
0x4fe ,	comment	; Wait for STATUS & 0x30 == 0x30
0x506,	pre_comment 	; We set IPL14 vector to this point
0x507,	pre_comment 	; This is the end of a fragment, which gets copied to top of RAM.
	 	; This function preserves Y and Z
0x507 ,	comment	; length = arg[0, 1]
0x509 ,	comment	; I completely fail to understand this fragment with checking length.
		; I mean - i understand what instructions mean,
		; but what's the real purpose of this fragment here ? In pristine on-disk WIPL it looks the same.
		; Is this patched during installation ?
0x50d ,	comment	; push length
0x50f ,	comment	; length = min(A, B)
0x512 ,	comment	; arg[2, 3]
0x517 ,	comment	; B = length
0x518 ,	comment	; Preserve Y
0x51b ,	comment	; dest
0x51e ,	comment	; src
0x520 ,	comment	; push X, will use as back counter
0x522 ,	comment	; X = length
0x524,	pre_comment 	; Copy X bytes from (A) to (Y)
0x527 ,	comment	; pop X
0x529 ,	comment	; pop Y
0x55a ,	comment	; '\r'
0x55c ,	comment	; last_char
0x55e ,	comment	; Don't print CR if already done
0x566 ,	comment	; Serisl port 0 base address
0x56a ,	comment	; Write the unprocessed character to MUX_REG[0x0D]
		; The purpose is unknown, probably some kind of debug port.
		; May be even not all cards really support it.
0x56d ,	comment	; Set up baud rate ?
0x574 ,	comment	; If character is 0x0c (form feed)...
0x575 ,	comment	; Print with a delay
0x579 ,	comment	; If character is \r...
0x57e ,	comment	; Add \n
0x584 ,	comment	; last_char = '\r'
0x595 ,	comment	; Wait for port ready
0x59c ,	comment	; Output che character
0x59f ,	comment	; last_char - last printed character stored right into the literal field.
		; Yes, this is a self-modifying instruction.
0x5a2 ,	comment	; Interrupt ACK perhaps
0x5a5 ,	comment	; A nice mechanics of reloading P register back to its original value.
		; Interrupts in cpu6 don't use stack, instead they just switch the
		; context like coroutines. This will store current PC value in P register
		; of the current IPL (so that it gets reloaded) and resumes from P register
		; on a lower IPL (0 in case of WIPL).
0x5a6,	pre_comment 	; This is an interrupt handler for the serial port
	 	; We know that a daisy chain interrupt line is used
0x5a6 ,	comment	; Serial0 base address
0x5ae ,	comment	; Read the character if ready
0x5b0 ,	comment	; Read data register of all 4 ports
0x5b3 ,	comment	; It looks like this is supposed to ensure a pending "RX ready"
0x5b6 ,	comment	; status is clear on all of them and the interrupt will be deasserted
0x5b9 ,	comment	; In case if it was caused by pressing a random key on any other terminal
0x5bc ,	comment	; No character available
0x5c4,	pre_comment 	; Wait for one character to arrive from the serial0 and echo it.
0x5c6 ,	comment	; Serial port base address
0x5ca ,	comment	; Grab a constant of 0xc5 from PrintChar
0x5cc ,	comment	; Baud rate ?
0x5cf ,	comment	; Install the interrupt handler
0x5d4 ,	comment	; Clear A at IPL6
0x5d7 ,	comment	; 6 is an IPL number, could be a coincidence
0x5d9 ,	comment	; But anyways we need to set the serial port up to
0x5dc ,	comment	; generate a daisy chain interrupt
0x5df ,	comment	; This waits for the character to arrive
0x5e1 ,	comment	; from within an interrupt handler
0x5e5 ,	comment	; Note we always set 8th bit by hands
0x5e9 ,	comment	; disable_echo, patched from other places
0x5eb ,	comment	; No echo if disabled
0x5ed ,	comment	; Echo the character if enabled
0x5f0 ,	comment	; 0x60 is an apostrophe, 0x61 is 'A'
0x5f5 ,	comment	; Looks like AL = toupper(AL)
0x5fa ,	comment	; A character of '\n' aborts the input and jumps to abort_addr.
0x5fc ,	comment	; In the beginning abort_addr was preset to BackToPrompt
0x5fd ,	comment	; If no, just return
0x5ff ,	comment	; abort_addr
0x602 ,	comment	; Ignore if unset
0x606 ,	comment	; The character is in AL
0x609,	pre_comment 	; This routine reads a line from the terminal.
	 	; The line is prefixed by 16-bit length, just like strings we print.
	 	; It is also supposed to be padded with spaces (0xA0) up to a certain
	 	; fixed length of at least 10 chars. NAME comparison wouldn't work without
	 	; it as it compares exactly 10 characters.
0x60b ,	comment	; preserved_abort_addr = abort_addr
0x60d ,	comment	; abort_addr = ReadLineAbort
0x612 ,	comment	; A = pointer to a buffer
0x613 ,	comment	; Push X (return address)
0x615 ,	comment	; X = buffer + 1 - this skips first byte of the length
0x616 ,	comment	; The second byte will be skipped because storing a character preincrements it
0x617 ,	comment	; '='
0x619 ,	comment	; This signals a prompt
0x61e ,	comment	; Check for Backspace
0x623 ,	comment	; Another option for backspace is 0x15 (NAK)
0x625 ,	comment	; Looks like our ADDS terminal uses it instead of standard 0x08
0x62a ,	comment	; Preserve our control character whatever it was
0x62c ,	comment	; Note it has already been echoed back by ReadChar, so our cursor
0x62e ,	comment	; has already moved one position back
0x630 ,	comment	; Nothing to delete if we have empty buffer
0x632 ,	comment	; ' ' (space)
0x634 ,	comment	; This actually rubs out the character on the screen
0x637 ,	comment	; Restore our saved control character
0x639 ,	comment	; And repeat it in order to move the cursor one step back again
0x63b ,	comment	; Decrement current input buffer position
0x63e ,	comment	; 0x06 - move the cursor one position forward ?
0x640 ,	comment	; PrintChar
0x644 ,	comment	; Check for '\n'
0x649 ,	comment	; Preserve the character
0x651 ,	comment	; Looks like this checks for maximum string length
0x655 ,	comment	; Next location (note the preincrement)
0x656 ,	comment	; AL = preserved character
0x658 ,	comment	; Store it and loop back to reading the next char
0x65b ,	comment	; A = pointer to a buffer + 1
0x65e ,	comment	; A = resulting string length
0x660 ,	comment	; Pop return address
0x662 ,	comment	; This stores length of the entered string and skips over the literal
0x664 ,	comment	; preserved_abort_addr
0x667 ,	comment	; abort_addr = preserved_abort_addr
0x669 ,	comment	; Re-enable echo of terminal input
0x66b ,	comment	; disable_echo
0x66f ,	comment	; Pop return address
0x671 ,	comment	; String length = 0
0x674 ,	comment	; Will return to preserved_abort_addr
